/*
    File: PropertyToAddressMap.slb
    Author: Andreas Olofsson (androlo1980@gmail.com)
*/

/*
    Library: PropertyToAddressMap

    PropertyToAddressMap is an iterable map with (bytes32, address) entries.

    Overwrites previous values by default.

    Insertion, finding, and removing elements are all O(1).

    Stores a boolean, and an array index (uint) for each element, in addition to the key and value.
    This is for easy lookup, and for making iteration possible.

    Order of insertion is not preserved.

    Author: Andreas Olofsson (androlo1980@gmail.com)
*/
library PropertyToAddressMap {

    /*
        Struct: Element

        Element type for the self.

        Members:

        _keyIndex - The index of the key in the backing array.
        value - The value.

    */
    struct Element {
        uint _keyIndex;
        address value;
    }

    /*
        Struct: Map

        Contains mappings of 'bytes32' -> <Element>, and an array with all values for iteration.
    */
    struct Map
    {
        mapping(bytes32 => Element) _data;
        bytes32[] _keys;
    }

    /*
        Function: insert(Map, bytes32, address)

        Add an entry to the map.

        Params:
            self (Map) - Storage reference to the map.
            key (bytes32) - The key.
            value (address) - The value.

        Returns:
            oldValue (address) - The old value, if any.
    */
    function insert(Map storage self, bytes32 key, address value) returns (address oldValue) {
        (oldValue,) = insert(self, key, value, true);
    }

    /*
        Function: insert(Map, bytes32, address, bool)

        Add an entry to the map.

        Params:
            self (Map) - Storage reference to the map.
            key (bytes32) - The key.
            value (address) - The value.
            overwrite (bool) - Whether or not to overwrite existing values.

        Returns:
            oldValue (address) - The old value, if any.
            added (bool) - Whether or not the entry was added.
    */
    function insert(Map storage self, bytes32 key, address value, bool overwrite) returns (address oldValue, bool added) {
        var exists = self._data[key].value != 0;

        if (!exists)
            self._data[key] = Element(self._keys.push(key) - 1, value);
        else if (overwrite) {
            oldValue = self._data[key].value;
            self._data[key].value = value;
            added = true;
        }
    }

    /*
        Function: remove

        Remove an entry from the map.

        Params:
            self (Map) - Storage reference to the map.
            key (bytes32) - The key.

        Returns:
            address (value) - The value that was removed, if any.
            removed (bool) - 'true' if the entry was removed, 'false' if not.
    */
    function remove(Map storage self, bytes32 key) returns (address value, bool removed) {
        var elem = self._data[key];
        value = elem.value;
        var exists = value != 0;
        if (!exists) return;

        var keyIndex = elem._keyIndex;

        delete self._data[key];
        var len = self._keys.length;
        if (keyIndex != len - 1) {
            var swap = self._keys[len - 1];
            self._keys[keyIndex] = swap;
            self._data[swap]._keyIndex = keyIndex;
        }
        self._keys.length--;
        removed = true;
    }

    /*
        Function: get

        Get a value by key.

        Params:
            self (Map) - Storage reference to the map.
            key (bytes32) - The key.

        Returns:
            address (value) - The value.
    */
    function get(Map storage self, bytes32 key) constant returns (address value) {
        return self._data[key].value;
    }

    /*
        Function: hasKey

        Check if a key exists.

        Params:
            self (Map) - Storage reference to the map.
            key (bytes32) - The key.

        Returns:
            has (bool) - 'true' if the key exists, otherwise 'false'.
    */
    function hasKey(Map storage self, bytes32 key) constant returns (bool has) {
        return self._data[key].value != 0;
    }

    /*
        Function: keyFromIndex

        Get a key by its index in the backing array. Used when iterating.

        Params:
            self (Map) - Storage reference to the map.
            index (uint) - The index.

        Returns:
            key (bytes32) - The key.
            exists (bool) - Whether or not the key exists. 'false' only if 'index' is illegal.
    */
    function keyFromIndex(Map storage self, uint index) constant returns (bytes32 key, bool exists) {
        if (index >= self._keys.length)
            return;
        else
            return (self._keys[index], true);
    }

    /*
        Function: entryFromIndex

        Get an entry by its index in the backing array. Used when iterating.

        Params:
            self (Map) - Storage reference to the map.
            index (uint) - The index.

        Returns:
            key (bytes32) - The key.
            value (address) - The value.
            exists (bool) - Whether or not the key exists. 'false' only if 'index' is illegal.
    */
    function entryFromIndex(Map storage self, uint index) constant returns (bytes32 key, address value, bool exists) {
        if (index >= self._keys.length)
            return;
        else {
            var k = self._keys[index];
            return (k, self._data[k].value, true);
        }
    }

    /*
        Function: size

        Get the size of the map.

        Params:
            self (Map) - Storage reference to the map.

        Returns:
            size (uint) - The size.
    */
    function size(Map storage self) constant returns (uint size) {
        return self._keys.length;
    }

}